services:

  php:
    container_name: weather-php
    build:
      context: ./docker/php
      dockerfile: Dockerfile
    restart: unless-stopped
    tty: true
    volumes:
      - ./src:/var/www
      #- ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - api-weather-network

  nginx:
    container_name: weather-nginx
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    restart: unless-stopped
    tty: true
    ports:
      - '8080:80'
      #- '443:443'
    volumes:
      - ./src:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - api-weather-network

  mysql:
    container_name: weather-mysql
    image: mysql:8.4.2
    restart: always
    tty: true
    volumes:
      - weather-volume:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - api-weather-network
    ports:
      - '3306:3306'
    environment:
      MYSQL_DATABASE: weather
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: user
      MYSQL_PASSWORD: password

networks:
  api-weather-network:
    name: weather-network
    driver: bridge

volumes:
  weather-volume:
    driver: local